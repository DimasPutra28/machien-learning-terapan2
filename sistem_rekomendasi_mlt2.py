# -*- coding: utf-8 -*-
"""sysrecmlt2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HmpNejqLLpmwbiAwXP2fFeBUNncQbybJ

# Data Understanding

## Import Library

#### pada tahapan ini terdapat beberapa library yang dibutuhkan sebagai pendukung model sistem rekomendasi
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns

"""### Load Data

#### pada tahapan ini terdapat memuat data yang akan digunakan dalam pembuatan sistem rekomendasi
"""

foods = pd.read_csv('food.csv')

foods.head()

"""# Univariate Exploratory Data Analysis

#### pada tahapan ini terdapat identifikasi data dan menganalisa data yang digunakan dengan mengetahui jumlah baris dan kolom data, missing value pada data dan melakukan distribusi data tiap atribut menggunakan bar plot
"""

foods.info()

print(f"Jumlah baris: {foods.shape[0]}, Jumlah kolom: {foods.shape[1]}")

# identifikasi missing value data
missing_values = foods.isnull().sum()
missing_values[missing_values > 0]

print(f"jumlah data yang hilang: ", missing_values)

foods.describe(include="all")

plt.figure(figsize=(10, 10))
sns.countplot(data=foods, y='C_Type', palette='Set2')
plt.title("Distribusi tipe kategori makanan")
plt.ylabel("kategori makanan")
plt.xlabel("jumlah")
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))
sns.countplot(data=foods, y='Veg_Non', palette='Set2')
plt.title("Distribusi tipe makanan vegan/non vegan")
plt.ylabel("vegan/non vegan")
plt.xlabel("jumlah")
plt.tight_layout()
plt.show()

# Korelasi Matrix untuk kolom kategorikal (one-hot encoding untuk visualisasi korelasi)
encoded_df = pd.get_dummies(foods[['C_Type', 'Veg_Non']])
plt.figure(figsize=(14, 12))
sns.heatmap(encoded_df.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Matrix (One-Hot Encoded Features)")
plt.tight_layout()
plt.show()

"""# Data Preparation

# Data Preprocessing

#### pada tahapan ini terdapat proses cek nilai kosong dan duplikat pada data, pemilihan variabel yang digunakan, penggabungan data yang telah dipilih, dan melakukan vektorisasi
"""

# cek nilai kosong
print("Nilai Kosong: ")
print(foods.isnull().sum())

# cek nilai duplikat
print("Nilai Duplikat: ")
print(foods.duplicated().sum())

# Gabungkan fitur untuk TF-IDF
foods['content'] = foods['C_Type'].fillna('') + ' ' + foods['Veg_Non'].fillna('') + ' ' + foods['Describe'].fillna('')
foods['content'] = foods['content'].str.lower()

# TF-IDF vectorizer
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(foods['content'])

"""# Model Development

#### pada tahapan ini terdapat melakukan modelling dan pengujian hasil rekomendasi menggunakan teknik Cosine similarity sebagai pertimbangan hasil rekomendasi
"""

# Cosine similarity antar makanan
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Buat mapping dari nama makanan ke index
indices = pd.Series(foods.index, index=foods['Name'].str.lower()).drop_duplicates()

def recommend_food(name, top_n=5):
    name = name.lower()
    if name not in indices:
        return f"Makanan '{name}' tidak ditemukan dalam data."

    idx = indices[name]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:top_n+1]

    food_indices = [i[0] for i in sim_scores]
    return foods[['Name', 'C_Type', 'Veg_Non']].iloc[food_indices]

recommend_food("cashew nut cookies", top_n=5)

"""# Evaluasi

#### pada tahapan ini terdapat evaluasi hasil rekomendasi menggunakan precision@k sebagai pertimbangkan kemiripan hasil rekomendasi
"""

from sklearn.metrics import precision_score

def precision_at_k(query_item, k=5):
    query_item = query_item.lower()

    # Cek apakah item ada dalam data
    if query_item not in indices:
        print(f"Makanan '{query_item}' tidak ditemukan dalam data.")
        return

    # Ambil index dan kategori (label relevansi) dari query item
    idx = indices[query_item]
    actual_type = foods.loc[idx, 'C_Type']

    # Ambil top-K rekomendasi makanan
    recommended = recommend_food(query_item, top_n=k)

    # Label relevansi: 1 jika kategori sama dengan query, 0 jika tidak
    y_true = [1 if ctype == actual_type else 0 for ctype in recommended['C_Type']]
    y_pred = [1] * len(y_true)  # Karena semua hasil rekomendasi dianggap "positif" oleh sistem

    # Precision@K = jumlah item relevan / jumlah total rekomendasi (K)
    precision = precision_score(y_true, y_pred, zero_division=0)

    print(f"Precision@{k} untuk: {query_item.title()} ({actual_type})")
    print(f"Precision@{k}: {precision:.2f}")
    print("\nRekomendasi:")
    print(recommended[['Name', 'C_Type', 'Veg_Non']])

precision_at_k("cashew nut cookies", k=5)

